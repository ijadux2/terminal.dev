{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.programs.kitty;

  # Define custom themes as attrsets
  themes = {
    dracula = {
      background = "#282a36";
      foreground = "#f8f8f2";
      selection_background = "#44475a";
      selection_foreground = "#ffffff";
      url_color = "#8be9fd";
      cursor = "#f8f8f2";
      cursor_text_color = "#282a36";
      active_border_color = "#bd93f9";
      inactive_border_color = "#6272a4";
      active_tab_background = "#bd93f9";
      active_tab_foreground = "#282a36";
      inactive_tab_background = "#6272a4";
      inactive_tab_foreground = "#f8f8f2";
      tab_bar_background = "#282a36";
      color0 = "#000000";  # Black
      color1 = "#ff5555";  # Red
      color2 = "#50fa7b";  # Green
      color3 = "#f1fa8c";  # Yellow
      color4 = "#bd93f9";  # Purple
      color5 = "#ff79c6";  # Pink
      color6 = "#8be9fd";  # Cyan
      color7 = "#bfbfbf";  # White
      color8 = "#4d4d4d";  # Bright Black
      color9 = "#ff6e67";  # Bright Red
      color10 = "#5af78e"; # Bright Green
      color11 = "#f4f99d"; # Bright Yellow
      color12 = "#caa9fa"; # Bright Purple
      color13 = "#ff92d0"; # Bright Pink
      color14 = "#9aedfe"; # Bright Cyan
      color15 = "#e6e6e6"; # Bright White
    };

    nord = {
      background = "#2e3440";
      foreground = "#d8dee9";
      selection_background = "#4c566a";
      selection_foreground = "#eceff4";
      url_color = "#88c0d0";
      cursor = "#eceff4";
      cursor_text_color = "#2e3440";
      active_border_color = "#88c0d0";
      inactive_border_color = "#4c566a";
      active_tab_background = "#88c0d0";
      active_tab_foreground = "#2e3440";
      inactive_tab_background = "#4c566a";
      inactive_tab_foreground = "#d8dee9";
      tab_bar_background = "#2e3440";
      color0 = "#3b4252";
      color1 = "#bf616a";
      color2 = "#a3be8c";
      color3 = "#ebcb8b";
      color4 = "#81a1c1";
      color5 = "#b48ead";
      color6 = "#88c0d0";
      color7 = "#e5e9f0";
      color8 = "#4c566a";
      color9 = "#bf616a";
      color10 = "#a3be8c";
      color11 = "#ebcb8b";
      color12 = "#81a1c1";
      color13 = "#b48ead";
      color14 = "#8be9fd";
      color15 = "#eceff4";
    };

    solarized-dark = {
      background = "#002b36";
      foreground = "#839496";
      selection_background = "#073642";
      selection_foreground = "#93a1a1";
      url_color = "#2aa198";
      cursor = "#839496";
      cursor_text_color = "#002b36";
      active_border_color = "#268bd2";
      inactive_border_color = "#586e75";
      active_tab_background = "#268bd2";
      active_tab_foreground = "#002b36";
      inactive_tab_background = "#586e75";
      inactive_tab_foreground = "#839496";
      tab_bar_background = "#002b36";
      color0 = "#073642";
      color1 = "#dc322f";
      color2 = "#859900";
      color3 = "#b58900";
      color4 = "#268bd2";
      color5 = "#d33682";
      color6 = "#2aa198";
      color7 = "#eee8d5";
      color8 = "#002b36";
      color9 = "#cb4b16";
      color10 = "#586e75";
      color11 = "#657b83";
      color12 = "#839496";
      color13 = "#6c71c4";
      color14 = "#93a1a1";
      color15 = "#fdf6e3";
    };
  };

  # Generate Kitty config content
  kittyConfig = ''
    # Kitty configuration generated by Nix
    # GPU acceleration enabled by default (OpenGL rendering)

    # Font settings
    font_family ${cfg.font.family}
    font_size ${toString cfg.font.size}
    bold_font auto
    italic_font auto
    bold_italic_font auto

    # Window settings
    window_padding_width ${toString cfg.window.padding.x}
    window_padding_height ${toString cfg.window.padding.y}
    hide_window_decorations ${if cfg.window.hideDecorations then "yes" else "no"}
    confirm_os_window_close 0

    # Tab settings
    tab_bar_style powerline
    tab_powerline_style slanted
    tab_title_template "{title}"

    # Scrollback
    scrollback_lines ${toString cfg.scrollback.lines}
    scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER

    # Mouse
    mouse_hide_wait 3.0
    url_style curly

    # Performance (GPU optimized)
    repaint_delay 10
    input_delay 3
    sync_to_monitor no

    # Theme colors
    ${concatStringsSep "\n" (mapAttrsToList (name: value: "${name} ${value}") (getAttr cfg.theme themes))}

    # Keybindings
    ${concatStringsSep "\n" (mapAttrsToList (key: action: "map ${key} ${action}") cfg.keybindings)}
  '';

in {
  options.programs.kitty = {
    enable = mkEnableOption "Kitty terminal emulator with GPU acceleration and custom themes";

    theme = mkOption {
      type = types.enum [ "dracula" "nord" "solarized-dark" ];
      default = "dracula";
      description = "Color theme for Kitty";
    };

    font = {
      family = mkOption {
        type = types.str;
        default = "JetBrains Mono";
        description = "Font family";
      };
      size = mkOption {
        type = types.int;
        default = 12;
        description = "Font size";
      };
    };

    window = {
      padding = {
        x = mkOption {
          type = types.int;
          default = 10;
          description = "Horizontal padding";
        };
        y = mkOption {
          type = types.int;
          default = 10;
          description = "Vertical padding";
        };
      };
      hideDecorations = mkOption {
        type = types.bool;
        default = false;
        description = "Hide window decorations";
      };
    };

    scrollback = {
      lines = mkOption {
        type = types.int;
        default = 10000;
        description = "Number of scrollback lines";
      };
    };

    keybindings = mkOption {
      type = types.attrsOf types.str;
      default = {
        "ctrl+shift+c" = "copy_to_clipboard";
        "ctrl+shift+v" = "paste_from_clipboard";
        "ctrl+shift+t" = "new_tab";
        "ctrl+shift+w" = "close_tab";
        "ctrl+shift+enter" = "new_window";
        "ctrl+shift+q" = "close_window";
      };
      description = "Custom keybindings";
    };
  };

  config = mkIf cfg.enable {
    # Install Kitty and dependencies
    environment.systemPackages = with pkgs; [
      kitty
      # Fonts for themes
      jetbrains-mono
      (nerdfonts.override { fonts = [ "JetBrainsMono" ]; })
      # GPU support (Mesa for OpenGL)
      mesa
      # Utilities
      xdg-utils
    ];

    # Generate Kitty config file
    environment.etc."xdg/kitty/kitty.conf".text = kittyConfig;

    # Set Kitty as default terminal (optional, for system-wide)
    environment.variables.TERMINAL = mkDefault "kitty";

    # Home Manager integration (if available)
    home-manager.users = mkIf (config ? home-manager) {
      # For each user, set Kitty config
      # Note: This assumes home-manager is configured elsewhere
      # In practice, users would import this module into their home-manager config
    };
  };
}
